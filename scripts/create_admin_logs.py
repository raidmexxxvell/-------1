#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã admin_logs –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
–ó–∞–ø—É—Å–∫: python scripts/create_admin_logs.py
"""

import os
import sys
from pathlib import Path
from dotenv import load_dotenv

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –ø–∞–ø–∫—É –ø—Ä–æ–µ–∫—Ç–∞ –≤ PYTHONPATH
project_root = Path(__file__).parent.parent
sys.path.insert(0, str(project_root))

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv(project_root / '.env.test')

from database.database_models import Base, db_manager, AdminLog
from sqlalchemy import text

def create_admin_logs_table():
    """–°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã admin_logs –∏ –∏–Ω–¥–µ–∫—Å–æ–≤"""
    try:
        print("üîÑ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...")
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î
        db_manager._ensure_initialized()
        engine = db_manager.engine
        
        print("üìã –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã admin_logs...")
        
        # –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã —á–µ—Ä–µ–∑ SQLAlchemy
        Base.metadata.create_all(engine, tables=[AdminLog.__table__])
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∏–Ω–¥–µ–∫—Å—ã –∏ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è (–µ—Å–ª–∏ –Ω—É–∂–Ω—ã —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ)
        with engine.connect() as conn:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã
            result = conn.execute(text("""
                SELECT EXISTS (
                    SELECT FROM information_schema.tables 
                    WHERE table_schema = 'public' 
                    AND table_name = 'admin_logs'
                );
            """))
            
            table_exists = result.scalar()
            
            if table_exists:
                print("‚úÖ –¢–∞–±–ª–∏—Ü–∞ admin_logs —Å–æ–∑–¥–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
                
                # –°–æ–∑–¥–∞–Ω–∏–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –∏–Ω–¥–µ–∫—Å–æ–≤
                try:
                    conn.execute(text("""
                        CREATE INDEX IF NOT EXISTS idx_admin_logs_admin_id 
                        ON admin_logs(admin_id);
                    """))
                    
                    conn.execute(text("""
                        CREATE INDEX IF NOT EXISTS idx_admin_logs_created_at 
                        ON admin_logs(created_at DESC);
                    """))
                    
                    conn.execute(text("""
                        CREATE INDEX IF NOT EXISTS idx_admin_logs_action 
                        ON admin_logs(action);
                    """))
                    
                    conn.execute(text("""
                        CREATE INDEX IF NOT EXISTS idx_admin_logs_result_status 
                        ON admin_logs(result_status);
                    """))
                    
                    conn.execute(text("""
                        CREATE INDEX IF NOT EXISTS idx_admin_logs_composite 
                        ON admin_logs(admin_id, created_at DESC);
                    """))
                    
                    # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –Ω–∞ result_status
                    conn.execute(text("""
                        DO $$ 
                        BEGIN
                            IF NOT EXISTS (
                                SELECT 1 FROM information_schema.constraint_column_usage 
                                WHERE table_name = 'admin_logs' 
                                AND constraint_name = 'chk_admin_logs_result_status'
                            ) THEN
                                ALTER TABLE admin_logs ADD CONSTRAINT chk_admin_logs_result_status 
                                    CHECK (result_status IN ('success', 'error'));
                            END IF;
                        END $$;
                    """))
                    
                    conn.commit()
                    print("‚úÖ –ò–Ω–¥–µ–∫—Å—ã –∏ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è —Å–æ–∑–¥–∞–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
                    
                except Exception as idx_err:
                    print(f"‚ö†Ô∏è  –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∏–Ω–¥–µ–∫—Å–æ–≤: {idx_err}")
                
                # –í—Å—Ç–∞–≤–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–π –∑–∞–ø–∏—Å–∏ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
                try:
                    conn.execute(text("""
                        INSERT INTO admin_logs (
                            admin_id, action, description, result_status, result_message
                        ) VALUES (
                            :admin_id, :action, :description, :status, :message
                        ) ON CONFLICT DO NOTHING;
                    """), {
                        'admin_id': 0,
                        'action': '–¢–µ—Å—Ç —Å–∏—Å—Ç–µ–º—ã –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è',
                        'description': '–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ —Ç–∞–±–ª–∏—Ü—ã admin_logs –ø–æ—Å–ª–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏',
                        'status': 'success',
                        'message': '–¢–∞–±–ª–∏—Ü–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞ –∏ –≥–æ—Ç–æ–≤–∞ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é'
                    })
                    conn.commit()
                    print("‚úÖ –¢–µ—Å—Ç–æ–≤–∞—è –∑–∞–ø–∏—Å—å –¥–æ–±–∞–≤–ª–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
                    
                except Exception as test_err:
                    print(f"‚ö†Ô∏è  –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–µ—Å—Ç–æ–≤–æ–π –∑–∞–ø–∏—Å–∏: {test_err}")
                
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Ç–∞–±–ª–∏—Ü—ã
                result = conn.execute(text("""
                    SELECT column_name, data_type, is_nullable 
                    FROM information_schema.columns 
                    WHERE table_name = 'admin_logs' 
                    ORDER BY ordinal_position;
                """))
                
                columns = result.fetchall()
                print("\nüìä –°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ç–∞–±–ª–∏—Ü—ã admin_logs:")
                for col in columns:
                    nullable = "NULL" if col[2] == "YES" else "NOT NULL"
                    print(f"  - {col[0]}: {col[1]} ({nullable})")
                
            else:
                print("‚ùå –û—à–∏–±–∫–∞: —Ç–∞–±–ª–∏—Ü–∞ admin_logs –Ω–µ –±—ã–ª–∞ —Å–æ–∑–¥–∞–Ω–∞")
                return False
        
        print("\nüéâ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç–∞–±–ª–∏—Ü—ã admin_logs –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–∞–±–ª–∏—Ü—ã admin_logs: {e}")
        import traceback
        traceback.print_exc()
        return False

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üöÄ –ù–∞—á–∏–Ω–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –ª–æ–≥–æ–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞...")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
    required_env_vars = ['DATABASE_URL']
    missing_vars = [var for var in required_env_vars if not os.getenv(var)]
    
    if missing_vars:
        print(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è: {', '.join(missing_vars)}")
        print("–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ DATABASE_URL –Ω–∞—Å—Ç—Ä–æ–µ–Ω –ø—Ä–∞–≤–∏–ª—å–Ω–æ")
        return False
    
    success = create_admin_logs_table()
    
    if success:
        print("\n‚ú® –ì–æ—Ç–æ–≤–æ! –°–∏—Å—Ç–µ–º–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –≥–æ—Ç–æ–≤–∞ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é.")
        print("\n–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ:")
        print("  - –ü—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å –ª–æ–≥–∏ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏ (–≤–∫–ª–∞–¥–∫–∞ '–õ–æ–≥–∏')")
        print("  - –û—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –≤—Å–µ –¥–µ–π—Å—Ç–≤–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤")
        print("  - –ê–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –æ–ø–µ—Ä–∞—Ü–∏–π")
        return True
    else:
        print("\nüí• –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –æ—à–∏–±–∫–∏ –≤—ã—à–µ.")
        return False

if __name__ == "__main__":
    exit(0 if main() else 1)

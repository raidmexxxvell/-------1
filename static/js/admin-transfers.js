/**
 * Transfer Manager - —Å–∏—Å—Ç–µ–º–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç—Ä–∞–Ω—Å—Ñ–µ—Ä–∞–º–∏ –∏–≥—Ä–æ–∫–æ–≤
 * –ò–Ω—Ç–µ–≥—Ä–∏—Ä—É–µ—Ç—Å—è —Å –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å—é –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –æ–∫–Ω–æ–º —Ç—Ä–∞–Ω—Å—Ñ–µ—Ä–æ–≤
 */
(function () {
  'use strict';

  // –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
  let transferQueue = [];
  let allPlayers = [];
  let allTeams = [];
  let currentPlayerData = null;

  // –£—Ç–∏–ª–∏—Ç—ã –¥–ª—è debounce –ø–æ–∏—Å–∫–∞
  function debounce(func, wait) {
    let timeout;
    return function executedFunction(...args) {
      const later = () => {
        clearTimeout(timeout);
        func(...args);
      };
      clearTimeout(timeout);
      timeout = setTimeout(later, wait);
    };
  }

  // –ü–æ–∫–∞–∑ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
  function showNotification(message, type = 'info') {
    if (window.showToast) {
      window.showToast(message, type, 4000);
    } else {
      console.log(`[${type.toUpperCase()}] ${message}`);
      alert(message);
    }
  }

  // –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–º–∞–Ω–¥
  async function loadTeams() {
    try {
      const response = await fetch('/api/admin/teams');
      if (!response.ok) throw new Error('Failed to fetch teams');

      const data = await response.json();
      allTeams = data.teams || [];

      // –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ —Å–µ–ª–µ–∫—Ç–æ–≤ –∫–æ–º–∞–Ω–¥
      populateTeamSelects();
    } catch (error) {
      console.error('Load teams error:', error);
      showNotification('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–º–∞–Ω–¥: ' + error.message, 'error');
    }
  }

  // –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ —Å–µ–ª–µ–∫—Ç–æ–≤ –∫–æ–º–∞–Ω–¥
  function populateTeamSelects() {
    const teamFilter = document.getElementById('transfer-team-filter');
    const targetTeamSelect = document.getElementById('transfer-target-team');

    if (teamFilter) {
      teamFilter.innerHTML = '<option value="">–í—Å–µ –∫–æ–º–∞–Ω–¥—ã</option>';
      allTeams.forEach(team => {
        const option = document.createElement('option');
        option.value = team.name;
        option.textContent = team.name;
        teamFilter.appendChild(option);
      });
    }

    if (targetTeamSelect) {
      targetTeamSelect.innerHTML = '<option value="">–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É...</option>';
      allTeams.forEach(team => {
        const option = document.createElement('option');
        option.value = team.name;
        option.textContent = team.name;
        targetTeamSelect.appendChild(option);
      });
    }
  }

  // –ó–∞–≥—Ä—É–∑–∫–∞ –≤—Å–µ—Ö –∏–≥—Ä–æ–∫–æ–≤
  async function loadAllPlayers() {
    const loadingEl = document.getElementById('transfer-loading');
    const tableEl = document.getElementById('transfer-players-table');
    const noDataEl = document.getElementById('transfer-no-players');

    if (loadingEl) loadingEl.style.display = 'block';
    if (tableEl) tableEl.style.display = 'none';
    if (noDataEl) noDataEl.style.display = 'none';

    try {
      allPlayers = [];

      // –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–≥—Ä–æ–∫–æ–≤ –¥–ª—è –∫–∞–∂–¥–æ–π –∫–æ–º–∞–Ω–¥—ã
      const loadPromises = allTeams.map(async team => {
        try {
          const response = await fetch(`/api/admin/teams/${team.id}/roster`);
          if (!response.ok) throw new Error(`Failed to load roster for ${team.name}`);

          const data = await response.json();
          const players = data.players || [];

          // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–º–∞–Ω–¥–µ –∫ –∫–∞–∂–¥–æ–º—É –∏–≥—Ä–æ–∫—É
          return players.map(player => ({
            ...player,
            team_name: team.name,
            team_id: team.id,
            full_name: `${player.first_name || ''} ${player.last_name || ''}`.trim(),
          }));
        } catch (error) {
          console.warn(`Failed to load roster for team ${team.name}:`, error);
          return [];
        }
      });

      const teamPlayers = await Promise.all(loadPromises);
      allPlayers = teamPlayers.flat();

      renderPlayersTable();
    } catch (error) {
      console.error('Load all players error:', error);
      showNotification('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–≥—Ä–æ–∫–æ–≤: ' + error.message, 'error');
    } finally {
      if (loadingEl) loadingEl.style.display = 'none';
    }
  }

  // –†–µ–Ω–¥–µ—Ä–∏–Ω–≥ —Ç–∞–±–ª–∏—Ü—ã –∏–≥—Ä–æ–∫–æ–≤
  function renderPlayersTable(filteredPlayers = null) {
    const tbody = document.getElementById('transfer-players-tbody');
    const tableEl = document.getElementById('transfer-players-table');
    const noDataEl = document.getElementById('transfer-no-players');

    if (!tbody) return;

    const playersToShow = filteredPlayers || allPlayers;

    if (playersToShow.length === 0) {
      if (tableEl) tableEl.style.display = 'none';
      if (noDataEl) noDataEl.style.display = 'block';
      return;
    }

    if (tableEl) tableEl.style.display = 'table';
    if (noDataEl) noDataEl.style.display = 'none';

    tbody.innerHTML = '';

    playersToShow.forEach(player => {
      const row = document.createElement('tr');

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ –∏–≥—Ä–æ–∫ –≤ –æ—á–µ—Ä–µ–¥–∏ —Ç—Ä–∞–Ω—Å—Ñ–µ—Ä–æ–≤
      const inQueue = transferQueue.some(
        t => t.player_name === player.full_name && t.from_team === player.team_name
      );

      if (inQueue) {
        row.classList.add('player-in-transfer-queue');
      }

      row.innerHTML = `
                <td class="player-name-compact">
                    <div><strong>${player.full_name || '–ë–µ–∑ –∏–º–µ–Ω–∏'}</strong></div>
                    ${inQueue ? '<div class="transfer-badge-compact">–í –æ—á–µ—Ä–µ–¥–∏</div>' : ''}
                </td>
                <td class="team-name-compact">${player.team_name}</td>
                <td class="stats-compact">${player.goals || 0}/${player.assists || 0}</td>
                <td class="cards-compact">
                    <span>üü°${player.yellow_cards || 0}</span>
                    <span>üî¥${player.red_cards || 0}</span>
                </td>
                <td>
                    <button class="transfer-btn-compact" onclick="window.TransferManager.openTransferModal('${player.full_name}', '${player.team_name}')" ${inQueue ? 'disabled' : ''}>
                        ‚ÜîÔ∏è
                    </button>
                </td>
            `;

      tbody.appendChild(row);
    });
  }

  // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –∏–≥—Ä–æ–∫–æ–≤
  function filterPlayers() {
    const searchTerm =
      document.getElementById('transfer-player-search')?.value?.toLowerCase() || '';
    const teamFilter = document.getElementById('transfer-team-filter')?.value || '';

    let filtered = allPlayers;

    // –§–∏–ª—å—Ç—Ä –ø–æ –ø–æ–∏—Å–∫—É (–∏–º—è –∏–≥—Ä–æ–∫–∞)
    if (searchTerm) {
      filtered = filtered.filter(player => player.full_name.toLowerCase().includes(searchTerm));
    }

    // –§–∏–ª—å—Ç—Ä –ø–æ –∫–æ–º–∞–Ω–¥–µ
    if (teamFilter) {
      filtered = filtered.filter(player => player.team_name === teamFilter);
    }

    renderPlayersTable(filtered);
  }

  // –û—á–∏—Å—Ç–∫–∞ –ø–æ–∏—Å–∫–∞
  function clearSearch() {
    const searchInput = document.getElementById('transfer-player-search');
    const teamFilter = document.getElementById('transfer-team-filter');

    if (searchInput) searchInput.value = '';
    if (teamFilter) teamFilter.value = '';

    renderPlayersTable();
  }

  // –û—Ç–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ —Ç—Ä–∞–Ω—Å—Ñ–µ—Ä–∞
  function openTransferModal(playerName, currentTeam) {
    const modal = document.getElementById('transfer-player-modal');
    const playerNameEl = document.getElementById('transfer-player-name');
    const currentTeamEl = document.getElementById('transfer-current-team');
    const targetTeamSelect = document.getElementById('transfer-target-team');

    if (!modal) return;

    currentPlayerData = { playerName, currentTeam };

    if (playerNameEl) playerNameEl.textContent = playerName;
    if (currentTeamEl) currentTeamEl.textContent = currentTeam;

    // –û—á–∏—â–∞–µ–º –∏ –∑–∞–ø–æ–ª–Ω—è–µ–º —Å–µ–ª–µ–∫—Ç –∫–æ–º–∞–Ω–¥ (–∏—Å–∫–ª—é—á–∞—è —Ç–µ–∫—É—â—É—é)
    if (targetTeamSelect) {
      targetTeamSelect.innerHTML = '<option value="">–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É...</option>';
      allTeams.forEach(team => {
        if (team.name !== currentTeam) {
          const option = document.createElement('option');
          option.value = team.name;
          option.textContent = team.name;
          targetTeamSelect.appendChild(option);
        }
      });
    }

    modal.style.display = 'flex';
  }

  // –ó–∞–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ —Ç—Ä–∞–Ω—Å—Ñ–µ—Ä–∞
  function closeTransferModal() {
    const modal = document.getElementById('transfer-player-modal');
    const targetTeamSelect = document.getElementById('transfer-target-team');

    if (modal) modal.style.display = 'none';
    if (targetTeamSelect) targetTeamSelect.value = '';

    currentPlayerData = null;
  }

  // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ –æ—á–µ—Ä–µ–¥—å —Ç—Ä–∞–Ω—Å—Ñ–µ—Ä–æ–≤
  function addToTransferQueue() {
    if (!currentPlayerData) return;

    const targetTeam = document.getElementById('transfer-target-team')?.value;
    if (!targetTeam) {
      showNotification('–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞', 'error');
      return;
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∏–≥—Ä–æ–∫ –µ—â–µ –Ω–µ –≤ –æ—á–µ—Ä–µ–¥–∏
    const existingTransfer = transferQueue.find(
      t =>
        t.player_name === currentPlayerData.playerName &&
        t.from_team === currentPlayerData.currentTeam
    );

    if (existingTransfer) {
      showNotification('–ò–≥—Ä–æ–∫ —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –æ—á–µ—Ä–µ–¥—å –ø–µ—Ä–µ–≤–æ–¥–æ–≤', 'warning');
      return;
    }

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –∏–≥—Ä–æ–∫–∞ –ø–µ—Ä–µ–¥ –∑–∞–∫—Ä—ã—Ç–∏–µ–º –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
    const playerName = currentPlayerData.playerName;

    // –î–æ–±–∞–≤–ª—è–µ–º –≤ –æ—á–µ—Ä–µ–¥—å
    transferQueue.push({
      player_name: currentPlayerData.playerName,
      from_team: currentPlayerData.currentTeam,
      to_team: targetTeam,
    });

    updateTransferQueueDisplay();
    closeTransferModal();
    renderPlayersTable(); // –ü–µ—Ä–µ—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º —Ç–∞–±–ª–∏—Ü—É —á—Ç–æ–±—ã –ø–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å

    showNotification(`–ò–≥—Ä–æ–∫ ${playerName} –¥–æ–±–∞–≤–ª–µ–Ω –≤ –æ—á–µ—Ä–µ–¥—å –ø–µ—Ä–µ–≤–æ–¥–æ–≤`, 'success');
  }

  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –æ—á–µ—Ä–µ–¥–∏ —Ç—Ä–∞–Ω—Å—Ñ–µ—Ä–æ–≤
  function updateTransferQueueDisplay() {
    const countEl = document.getElementById('transfer-count');
    const emptyStateEl = document.getElementById('transfer-queue-empty');
    const contentEl = document.getElementById('transfer-queue-content');
    const listEl = document.getElementById('transfer-queue-list');
    const saveBtn = document.getElementById('transfer-save-all');

    if (countEl) countEl.textContent = transferQueue.length;

    if (transferQueue.length === 0) {
      if (emptyStateEl) emptyStateEl.style.display = 'flex';
      if (contentEl) contentEl.style.display = 'none';
    } else {
      if (emptyStateEl) emptyStateEl.style.display = 'none';
      if (contentEl) contentEl.style.display = 'flex';
    }

    if (saveBtn) {
      saveBtn.disabled = transferQueue.length === 0;
    }

    if (listEl) {
      listEl.innerHTML = '';
      transferQueue.forEach((transfer, index) => {
        const item = document.createElement('div');
        item.className = 'queue-item-compact';
        item.innerHTML = `
                    <div class="transfer-info-compact">
                        <div class="player-in-queue">${transfer.player_name}</div>
                        <div class="transfer-direction-compact">
                            ${transfer.from_team} ‚Üí ${transfer.to_team}
                        </div>
                    </div>
                    <button class="remove-btn-compact" onclick="window.TransferManager.removeFromQueue(${index})" title="–£–¥–∞–ª–∏—Ç—å">
                        ‚úï
                    </button>
                `;
        listEl.appendChild(item);
      });
    }
  }

  // –£–¥–∞–ª–µ–Ω–∏–µ –∏–∑ –æ—á–µ—Ä–µ–¥–∏ —Ç—Ä–∞–Ω—Å—Ñ–µ—Ä–æ–≤
  function removeFromQueue(index) {
    if (index >= 0 && index < transferQueue.length) {
      const removed = transferQueue.splice(index, 1)[0];
      updateTransferQueueDisplay();
      renderPlayersTable(); // –ü–µ—Ä–µ—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º —Ç–∞–±–ª–∏—Ü—É
      showNotification(`–ü–µ—Ä–µ–≤–æ–¥ ${removed.player_name} —É–¥–∞–ª–µ–Ω –∏–∑ –æ—á–µ—Ä–µ–¥–∏`, 'info');
    }
  }

  // –û—á–∏—Å—Ç–∫–∞ –≤—Å–µ–π –æ—á–µ—Ä–µ–¥–∏
  function clearTransferQueue() {
    if (transferQueue.length === 0) return;

    if (confirm(`–£–¥–∞–ª–∏—Ç—å –≤—Å–µ ${transferQueue.length} –ø–µ—Ä–µ–≤–æ–¥–æ–≤ –∏–∑ –æ—á–µ—Ä–µ–¥–∏?`)) {
      transferQueue = [];
      updateTransferQueueDisplay();
      renderPlayersTable();
      showNotification('–û—á–µ—Ä–µ–¥—å –ø–µ—Ä–µ–≤–æ–¥–æ–≤ –æ—á–∏—â–µ–Ω–∞', 'info');
    }
  }

  // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤—Å–µ—Ö —Ç—Ä–∞–Ω—Å—Ñ–µ—Ä–æ–≤
  function saveAllTransfers() {
    if (transferQueue.length === 0) return;

    const modal = document.getElementById('transfer-confirm-modal');
    const listEl = document.getElementById('transfer-confirm-list');

    if (!modal || !listEl) return;

    // –ó–∞–ø–æ–ª–Ω—è–µ–º —Å–ø–∏—Å–æ–∫ —Ç—Ä–∞–Ω—Å—Ñ–µ—Ä–æ–≤ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    listEl.innerHTML = '';
    transferQueue.forEach((transfer, index) => {
      const item = document.createElement('div');
      item.className = 'confirm-item';
      item.innerHTML = `
                <div class="confirm-transfer">
                    ${index + 1}. <strong>${transfer.player_name}</strong>
                    <span class="transfer-direction">${transfer.from_team} ‚Üí ${transfer.to_team}</span>
                </div>
            `;
      listEl.appendChild(item);
    });

    modal.style.display = 'flex';
  }

  // –ó–∞–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
  function closeConfirmModal() {
    const modal = document.getElementById('transfer-confirm-modal');
    const titleInput = document.getElementById('transfer-news-title');

    if (modal) modal.style.display = 'none';
    if (titleInput) titleInput.value = '';
  }

  // –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ç—Ä–∞–Ω—Å—Ñ–µ—Ä–æ–≤
  async function executeTransfers() {
    const executeBtn = document.getElementById('transfer-confirm-execute');
    const customTitle = document.getElementById('transfer-news-title')?.value?.trim() || '';

    if (!executeBtn || transferQueue.length === 0) return;

    const originalText = executeBtn.textContent;
    executeBtn.disabled = true;
    executeBtn.textContent = '–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è...';

    try {
      // –í—ã–ø–æ–ª–Ω—è–µ–º –ø–µ—Ä–µ–≤–æ–¥—ã –ø–æ –æ–¥–Ω–æ–º—É
      const successfulTransfers = [];
      const failedTransfers = [];

      for (const transfer of transferQueue) {
        try {
          const response = await fetch('/api/admin/players/transfer', {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json',
            },
            body: JSON.stringify(transfer),
          });

          if (response.ok) {
            successfulTransfers.push(transfer);
          } else {
            const errorData = await response.json();
            failedTransfers.push({
              ...transfer,
              error: errorData.error || 'Unknown error',
            });
          }
        } catch (error) {
          failedTransfers.push({
            ...transfer,
            error: error.message,
          });
        }
      }

      // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ—Å—Ç—å –æ —Ç—Ä–∞–Ω—Å—Ñ–µ—Ä–∞—Ö, –µ—Å–ª–∏ –µ—Å—Ç—å —É—Å–ø–µ—à–Ω—ã–µ –ø–µ—Ä–µ–≤–æ–¥—ã
      if (successfulTransfers.length > 0) {
        try {
          await fetch('/api/admin/transfers/news', {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json',
            },
            body: JSON.stringify({
              transfers: successfulTransfers,
              news_title: customTitle,
            }),
          });
        } catch (newsError) {
          console.warn('Failed to create transfer news:', newsError);
        }
      }

      // –û—á–∏—â–∞–µ–º –æ—á–µ—Ä–µ–¥—å –∏ –∑–∞–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
      transferQueue = [];
      updateTransferQueueDisplay();
      closeConfirmModal();

      // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
      await loadAllPlayers();

      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
      if (successfulTransfers.length > 0 && failedTransfers.length === 0) {
        showNotification(
          `–í—Å–µ ${successfulTransfers.length} –ø–µ—Ä–µ–≤–æ–¥–æ–≤ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ! –ù–æ–≤–æ—Å—Ç—å —Å–æ–∑–¥–∞–Ω–∞.`,
          'success'
        );
      } else if (successfulTransfers.length > 0) {
        showNotification(
          `${successfulTransfers.length} –ø–µ—Ä–µ–≤–æ–¥–æ–≤ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ, ${failedTransfers.length} —Å –æ—à–∏–±–∫–∞–º–∏.`,
          'warning'
        );
      } else {
        showNotification('–í—Å–µ –ø–µ—Ä–µ–≤–æ–¥—ã –∑–∞–≤–µ—Ä—à–∏–ª–∏—Å—å –æ—à–∏–±–∫–∞–º–∏', 'error');
      }

      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–µ—Ç–∞–ª–∏ –æ—à–∏–±–æ–∫ –µ—Å–ª–∏ –µ—Å—Ç—å
      if (failedTransfers.length > 0) {
        console.error('Failed transfers:', failedTransfers);
      }
    } catch (error) {
      console.error('Execute transfers error:', error);
      showNotification('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —Ç—Ä–∞–Ω—Å—Ñ–µ—Ä–æ–≤: ' + error.message, 'error');
    } finally {
      executeBtn.disabled = false;
      executeBtn.textContent = originalText;
    }
  }

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
  function initTransferManager() {
    console.log('[TransferManager] Initializing transfer management system');

    // –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ —Å–æ–±—ã—Ç–∏—è –ø–æ–∏—Å–∫–∞
    const searchInput = document.getElementById('transfer-player-search');
    const teamFilter = document.getElementById('transfer-team-filter');
    const clearSearchBtn = document.getElementById('transfer-clear-search');
    const refreshBtn = document.getElementById('transfer-refresh-btn');

    if (searchInput) {
      searchInput.addEventListener('input', debounce(filterPlayers, 300));
    }

    if (teamFilter) {
      teamFilter.addEventListener('change', filterPlayers);
    }

    if (clearSearchBtn) {
      clearSearchBtn.addEventListener('click', clearSearch);
    }

    if (refreshBtn) {
      refreshBtn.addEventListener('click', async () => {
        await loadTeams();
        await loadAllPlayers();
      });
    }

    // –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ—á–µ—Ä–µ–¥—å—é
    const saveAllBtn = document.getElementById('transfer-save-all');
    const clearAllBtn = document.getElementById('transfer-clear-all');
    const addToQueueBtn = document.getElementById('transfer-add-to-queue');
    const executeBtn = document.getElementById('transfer-confirm-execute');

    if (saveAllBtn) {
      saveAllBtn.addEventListener('click', saveAllTransfers);
    }

    if (clearAllBtn) {
      clearAllBtn.addEventListener('click', clearTransferQueue);
    }

    if (addToQueueBtn) {
      addToQueueBtn.addEventListener('click', addToTransferQueue);
    }

    if (executeBtn) {
      executeBtn.addEventListener('click', executeTransfers);
    }

    // –ó–∞–≥—Ä—É–∑–∫–∞ –Ω–∞—á–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    loadTeams().then(() => {
      loadAllPlayers();
    });
  }

  // –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º API –≤ –≥–ª–æ–±–∞–ª—å–Ω—É—é –æ–±–ª–∞—Å—Ç—å –≤–∏–¥–∏–º–æ—Å—Ç–∏
  window.TransferManager = {
    init: initTransferManager,
    openTransferModal,
    closeTransferModal,
    closeConfirmModal,
    removeFromQueue,
    loadAllPlayers,
    clearSearch,
  };

  // –ê–≤—Ç–æ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ DOM
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', initTransferManager);
  } else {
    initTransferManager();
  }
})();
